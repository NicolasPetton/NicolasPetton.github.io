<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
     xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>Amber's new compiler</title>
  <atom:link href="http://nicolas-petton.fr/blog/amber-compiler.xml" rel="self" type="application/rss+xml" />
  <link>http://nicolas-petton.fr/blog/</link>
  <description><![CDATA[]]></description>
  <language>en</language>
  <pubDate>Fri, 05 Aug 2016 12:03:42 +0200</pubDate>
  <lastBuildDate>Fri, 05 Aug 2016 12:03:42 +0200</lastBuildDate>
  <generator>Emacs 25.1 Org-mode 8.3.5</generator>
  <webMaster>nicolas@petton.fr (Nicolas Petton)</webMaster>
  <image>
    <url>http://nicolas-petton.fr/images/nicolas-petton.png</url>
    <title>Amber's new compiler</title>
    <link>http://nicolas-petton.fr/blog/</link>
  </image>


  <item>
    <title>Amber's new *compiler*</title>
    <link>http://nicolas-petton.fr/blog/amber-compiler.html#orgheadline1</link>
    <author>nicolas@petton.fr (Nicolas Petton)</author>
    <guid isPermaLink="false">http://nicolas-petton.fr/blog/amber-compiler.html#orgheadline1</guid>
    <pubDate>Fri, 18 Oct 2013 06:55:00 +0200</pubDate>

    <description><![CDATA[<div class="pubdate">
    October 18, 2013
    </div>

    <p>
    Amber's compiler has been improved some months ago and a post
    explaining its new architecture was a long overdue.
    </p>

    <p>
    Following Opal (the new <a href="http://pharo-project.org">Pharo</a> compiler) architecture, the compiler
    has been entirely rewritten from a single, complex and stateful AST
    visitor into several smaller, single-purpose classes, making it a
    more flexible and extensible compiler.
    </p>

    <div id="outline-container-orgheadline1" class="outline-3">
    <h3 id="orgheadline1"><a id="ID-b922a3e9-fa23-4db9-a86b-8df6bf730977"></a>The new architecture</h3>
    <div class="outline-text-3" id="text-orgheadline1">
    <p>
    The AST produced by the parser is first annotated and validated by
    the <code>SemanticAnalyzer</code>. The annotation step is important as it adds
    semantic knowledge to the AST (scope, variable semantics, etc.).
    This way we first make sure that the produced AST is both valid
    syntactically and semantically, and keep semantic information
    directly in nodes.
    </p>


    <div class="org-src-container">

    <pre class="src src-ruby">| ast ir output |

    ast := <span style="color: #61afef;">Smalltalk</span> current <span style="color: #da8548; font-weight: bold;">parse:</span> <span style="color: #98be65;">'foo true ifTrue: [ ^ self asString ]'</span>.
    (<span style="color: #61afef;">SemanticAnalyzer</span> <span style="color: #da8548; font-weight: bold;">on:</span> <span style="color: #61afef;">Object</span>) visit: ast.
    </pre>
    </div>


    <p>
    The second step is to produce an intermediate representation (IR)
    through an <code>IRASTTranslator</code>. The IR tree is similar to the AST but is
    simpler and flatten. It doesn't includes cascades for instance, and
    cut down most of the tree into a flat list of instructions.
    </p>


    <div class="org-src-container">

    <pre class="src src-ruby">ir := <span style="color: #61afef;">IRASTTranslator</span> new <span style="color: #da8548; font-weight: bold;">visit:</span> ast.
    </pre>
    </div>


    <p>
    From the IR it's a lot easier to perform efficient inlinings. This
    optional step is performed by the <code>IRInliner</code> visitor. The <code>IRInlner</code>
    replaces parts of the tree, with the inlined equivalent. You can find
    the currently inlined send nodes with <code>IRSendInliner class &gt;&gt;
    inlinedSelectors</code>.
    </p>

    <p>
    The final step is then to produce the JavaScript output. This is the
    role of the <code>IRJSTranslator</code>. The compiler can then install the method
    in the appropriate class.
    </p>


    <div class="org-src-container">

    <pre class="src src-ruby">output := <span style="color: #61afef;">IRJSTranslator</span> new
    <span style="color: #da8548; font-weight: bold;">currentClass:</span> <span style="color: #61afef;">Object</span>;
    <span style="color: #da8548; font-weight: bold;">visit:</span> ir;
    contents
    </pre>
    </div>



    <p>
    The following diagram shows the current architecture.
    </p>

    <div class="figure">
    <p><img src="http://nicolas-petton.fr/blog/../images/amber-compiler.png" alt="amber-compiler.png" />
    </p>
    </div>
    </div>
    </div>


    <div id="outline-container-orgheadline1" class="outline-3">
    <h3 id="orgheadline1"><a id="ID-b9289317-95e2-422d-b90c-7b0fcd7d7890"></a>The public API</h3>
    <div class="outline-text-3" id="text-orgheadline1">
    <p>
    The <code>Compiler</code> facade hides all the internals away and provides the
    public API to compile and install methods in Amber. It internally
    delegates compiling to an instance of <code>CodeGenerator</code>, or its
    subclass <code>InliningCodeGenerator</code> (the default), that will perform
    the optional inlining step.
    </p>

    <div class="org-src-container">

    <pre class="src src-ruby"><span style="color: #98be65;">"Compiling without installing"</span>
    <span style="color: #61afef;">Compiler</span> new
    <span style="color: #da8548; font-weight: bold;">codeGeneratorClass:</span> <span style="color: #61afef;">InliningCodeGenerator</span>; <span style="color: #98be65;">"Default, can be omitted"</span>
    <span style="color: #da8548; font-weight: bold;">compile:</span> <span style="color: #98be65;">'foo true ifTrue: [ ^ self asString ]'</span>
    <span style="color: #da8548; font-weight: bold;">forClass:</span> <span style="color: #61afef;">Object</span>.

    <span style="color: #98be65;">"Compiling and installing"</span>
    <span style="color: #61afef;">Compiler</span> new
    <span style="color: #da8548; font-weight: bold;">codeGeneratorClass:</span> <span style="color: #61afef;">InliningCodeGenerator</span>; <span style="color: #98be65;">"Default, can be omitted"</span>
    <span style="color: #da8548; font-weight: bold;">install:</span> <span style="color: #98be65;">'foo true ifTrue: [ ^ self asString ]'</span>
    <span style="color: #da8548; font-weight: bold;">forClass:</span> <span style="color: #61afef;">Object</span>
    <span style="color: #da8548; font-weight: bold;">category:</span> <span style="color: #98be65;">'foo'</span>
    </pre>
    </div>
    </div>
    </div>

    <div id="outline-container-orgheadline1" class="outline-3">
    <h3 id="orgheadline1"><a id="ID-f0d4cc95-d0ba-451b-984f-953b67c4c72d"></a>The end</h3>
    <div class="outline-text-3" id="text-orgheadline1">
    <p>
    That's all for now. The new compiler is a very important brick for
    Amber. There is still room for improvement, as the generated code
    could sometimes be simpler, but it is overall a great improvement
    over the old compiler. Together with the new <code>ASTInterpreter</code>, it
    will allow fancy new features in Amber, like the new stepping
    debugger.
    </p>

    <p>
    I plan to write another post with more details about the inlining
    steps. Stay tuned!
    </p>



    <div id="disqus_thread"></div>
    <script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'nicolas-petton'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    </div>
    </div>
    ]]></description>
</item>
</channel>
</rss>
