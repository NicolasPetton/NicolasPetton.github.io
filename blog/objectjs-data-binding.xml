<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
     xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>Data binding with <b>objectjs</b></title>
  <atom:link href="http://nicolas-petton.fr/blog/objectjs-data-binding.xml" rel="self" type="application/rss+xml" />
  <link>http://nicolas-petton.fr/blog/</link>
  <description><![CDATA[]]></description>
  <language>en</language>
  <pubDate>Tue, 06 Sep 2016 22:24:50 +0200</pubDate>
  <lastBuildDate>Tue, 06 Sep 2016 22:24:50 +0200</lastBuildDate>
  <generator>Emacs 25.1 Org-mode 8.3.5</generator>
  <webMaster>nicolas@petton.fr (Nicolas Petton)</webMaster>
  <image>
    <url>http://nicolas-petton.fr/images/nicolas-petton.png</url>
    <title>Data binding with <b>objectjs</b></title>
    <link>http://nicolas-petton.fr/blog/</link>
  </image>


  <item>
    <title>Data binding with *objectjs*</title>
    <link>http://nicolas-petton.fr/blog/objectjs-data-binding.html#orgheadline1</link>
    <author>nicolas@petton.fr (Nicolas Petton)</author>
    <guid isPermaLink="false">http://nicolas-petton.fr/blog/objectjs-data-binding.html#orgheadline1</guid>
    <pubDate>Tue, 06 Sep 2016 22:09:00 +0200</pubDate>

    <description><![CDATA[<div class="pubdate">
    Sept 6, 2016
    </div>

    <p>
    Objectjs is a simple object model for JavaScript, you can read more about it
    <a href="https://github.com/foretagsplatsen/objectjs">here</a>.
    </p>

    <p>
    I've been thinking for a while about adding first-class properties to it to
    enable data binding in <a href="https://github.com/foretagsplatsen/widgetjs">widgetjs</a>.
    </p>

    <p>
    The idea is not new: whenever a domain object property is updated, any widget
    rendering that property could be updated automatically.  <a href="https://facebook.github.io/react/">React</a> has been doing
    this for a while, but I'll explain here a slightly different approach that we
    took.
    </p>

    <div id="outline-container-orgheadline1" class="outline-3">
    <h3 id="orgheadline1"><a id="ID-42b5775b-3c43-4a73-817e-29922f267662"></a>The counter example revisited</h3>
    <div class="outline-text-3" id="text-orgheadline1">
    <p>
    Let's have a look at a simple counter widget with two buttons to increment and
    decrement a counter, as it is today in <a href="https://github.com/foretagsplatsen/widgetjs">widgetjs</a>.
    </p>

    <div class="org-src-container">

    <pre class="src src-js"><span style="color: #687080; font-style: italic;">// </span><span style="color: #687080; font-style: italic;">The counter model</span>
    <span style="color: #c678dd; font-weight: bold;">var</span> <span style="color: #61afef;">counter</span> = objectjs.object.subclass(<span style="color: #c678dd; font-weight: bold;">function</span>(<span style="color: #c678dd; font-weight: bold;">that</span>, <span style="color: #c678dd; font-weight: bold;">my</span>) {
    <span style="color: #c678dd; font-weight: bold;">my</span>.initialize = <span style="color: #c678dd; font-weight: bold;">function</span>(<span style="color: #c678dd; font-weight: bold;">spec</span>) {
    <span style="color: #c678dd; font-weight: bold;">my</span>.<span style="color: #c678dd; font-weight: bold;">super</span>(<span style="color: #c678dd; font-weight: bold;">spec</span>);
    <span style="color: #c678dd; font-weight: bold;">my</span>.count = 0;
    };

    <span style="color: #c678dd; font-weight: bold;">my</span>.get(<span style="color: #98be65;">"count"</span>);

    <span style="color: #c678dd; font-weight: bold;">that</span>.increment = <span style="color: #c678dd; font-weight: bold;">function</span>() {
    <span style="color: #c678dd; font-weight: bold;">my</span>.count++;
    };

    <span style="color: #c678dd; font-weight: bold;">that</span>.decrement = <span style="color: #c678dd; font-weight: bold;">function</span>() {
    <span style="color: #c678dd; font-weight: bold;">my</span>.count--;
    };
    });

    <span style="color: #687080; font-style: italic;">// </span><span style="color: #687080; font-style: italic;">The counter widget</span>
    <span style="color: #c678dd; font-weight: bold;">var</span> <span style="color: #61afef;">counterWidget</span> = widgetjs.widget.subclass(<span style="color: #c678dd; font-weight: bold;">function</span>(<span style="color: #c678dd; font-weight: bold;">that</span>, <span style="color: #c678dd; font-weight: bold;">my</span>) {
    <span style="color: #c678dd; font-weight: bold;">my</span>.initialize = <span style="color: #c678dd; font-weight: bold;">function</span>(<span style="color: #c678dd; font-weight: bold;">spec</span>) {
    <span style="color: #c678dd; font-weight: bold;">my</span>.<span style="color: #c678dd; font-weight: bold;">super</span>(<span style="color: #c678dd; font-weight: bold;">spec</span>);
    <span style="color: #c678dd; font-weight: bold;">my</span>.counter = counter();
    };

    <span style="color: #c678dd; font-weight: bold;">that</span>.renderContentOn = <span style="color: #c678dd; font-weight: bold;">function</span> (<span style="color: #61afef;">html</span>) {
    html.<span style="color: #61afef; background-color: #38394c; font-weight: bold;">h1</span>(<span style="color: #c678dd; font-weight: bold;">my</span>.counter.getCount());
    html.<span style="color: #61afef; background-color: #38394c; font-weight: bold;">button</span>(<span style="color: #98be65;">'+'</span>).click(<span style="color: #c678dd; font-weight: bold;">function</span>() {
    <span style="color: #c678dd; font-weight: bold;">my</span>.counter.increment();
    <span style="color: #c678dd; font-weight: bold;">that</span>.update();
    });
    html.<span style="color: #61afef; background-color: #38394c; font-weight: bold;">button</span>(<span style="color: #98be65;">'-'</span>).click(<span style="color: #c678dd; font-weight: bold;">function</span>() {
    <span style="color: #c678dd; font-weight: bold;">my</span>.counter.decrement();
    <span style="color: #c678dd; font-weight: bold;">that</span>.update();
    });
    };
    });
    </pre>
    </div>

    <p>
    As you can see, each time the <code>count</code> value changes, the widget is explicitly
    re-rendered with <code>that.update()</code>.
    </p>

    <p>
    While this approach works fine, the rendering logic quickly becomes hard to
    maintain as the complexity of the UI grows, leading to complicated and coupled
    updates of widgets.
    </p>
    </div>
    </div>

    <div id="outline-container-orgheadline1" class="outline-3">
    <h3 id="orgheadline1"><a id="ID-6675dd9b-fb67-4396-8f99-96e19421d294"></a>Properties in <code>objectjs</code></h3>
    <div class="outline-text-3" id="text-orgheadline1">
    <p>
    The first thing to get data binding is a way to listen to domain attribute
    changes.  That's easy enough with ECMAScript5 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">object properties</a>:
    </p>

    <div class="org-src-container">

    <pre class="src src-js">object.extend(<span style="color: #c678dd; font-weight: bold;">function</span>(<span style="color: #c678dd; font-weight: bold;">that</span>, <span style="color: #c678dd; font-weight: bold;">my</span>) {
    <span style="color: #c678dd; font-weight: bold;">my</span>.property = <span style="color: #c678dd; font-weight: bold;">function</span>(<span style="color: #61afef;">propName</span>, <span style="color: #61afef;">initialValue</span>) {
    <span style="color: #c678dd; font-weight: bold;">var</span> <span style="color: #61afef;">value</span> = initialValue;
    Object.defineProperty(<span style="color: #c678dd; font-weight: bold;">my</span>, propName, {
    configurable: <span style="color: #da8548; font-weight: bold;">true</span>,
    enumerable: <span style="color: #da8548; font-weight: bold;">true</span>,
    <span style="color: #61afef;">get</span>: <span style="color: #c678dd; font-weight: bold;">function</span>() {
    emitPropertyAccess(propName);
    <span style="color: #c678dd; font-weight: bold;">return</span> value;
    },
    <span style="color: #61afef;">set</span>: <span style="color: #c678dd; font-weight: bold;">function</span>(<span style="color: #61afef;">newValue</span>) {
    value = newValue;
    emitPropertyChange(propName, value);
    }
    });
    };
    });
    </pre>
    </div>

    <p>
    As you can see, we're defining a property by name, with a custom getter and
    setter that will trigger an event <b>each time the property is accessed and
    updated</b>.  I'm leaving details about <code>emitPropertyChange</code> here, but you can
    have a look at the <a href="https://github.com/foretagsplatsen/objectjs/pull/20">source</a>.
    </p>

    <p>
    With this in place, we can now listen for property changes on the widget side:
    </p>

    <div class="org-src-container">

    <pre class="src src-js"><span style="color: #687080; font-style: italic;">// </span><span style="color: #687080; font-style: italic;">Register to property accesses for data binding</span>
    objectjs.propertyEventEmitter.instance().onAccess(<span style="color: #c678dd; font-weight: bold;">function</span>(<span style="color: #61afef;">instance</span>, <span style="color: #61afef;">propName</span>) {
    <span style="color: #c678dd; font-weight: bold;">var</span> <span style="color: #61afef;">widget</span> = currentWidget.get();
    <span style="color: #c678dd; font-weight: bold;">if</span> (widget) {
    instance.onPropertyChange(propName, widget.update);
    }
    });
    </pre>
    </div>

    <p>
    The only fancy thing here being <code>currentWidget</code>: during the rendering phase, we
    keep track of the current widget being rendered.  This way we know at any time
    in the rendering which widget shoud listen to property changes.
    </p>
    </div>
    </div>

    <div id="outline-container-orgheadline1" class="outline-3">
    <h3 id="orgheadline1"><a id="ID-376360ca-05a7-4d94-854e-19093228cdab"></a>A better counter example</h3>
    <div class="outline-text-3" id="text-orgheadline1">
    <p>
    Now that we can define properties and let the widgets update themselves whenever they change:
    </p>

    <div class="org-src-container">

    <pre class="src src-js"><span style="color: #c678dd; font-weight: bold;">var</span> <span style="color: #61afef;">counter</span> = objectjs.object.subclass(<span style="color: #c678dd; font-weight: bold;">function</span>(<span style="color: #c678dd; font-weight: bold;">that</span>, <span style="color: #c678dd; font-weight: bold;">my</span>) {
    <span style="color: #c678dd; font-weight: bold;">my</span>.initialize = <span style="color: #c678dd; font-weight: bold;">function</span>(<span style="color: #c678dd; font-weight: bold;">spec</span>) {
    <span style="color: #c678dd; font-weight: bold;">my</span>.<span style="color: #c678dd; font-weight: bold;">super</span>(<span style="color: #c678dd; font-weight: bold;">spec</span>);
    <span style="color: #c678dd; font-weight: bold;">my</span>.property(<span style="color: #98be65;">"count"</span>, 0);
    };

    <span style="color: #c678dd; font-weight: bold;">my</span>.get(<span style="color: #98be65;">"count"</span>);
    <span style="color: #c678dd; font-weight: bold;">that</span>.increment = <span style="color: #c678dd; font-weight: bold;">function</span>() {
    <span style="color: #c678dd; font-weight: bold;">my</span>.count++;
    };

    <span style="color: #c678dd; font-weight: bold;">that</span>.decrement = <span style="color: #c678dd; font-weight: bold;">function</span>() {
    <span style="color: #c678dd; font-weight: bold;">my</span>.count--;
    };
    });

    <span style="color: #c678dd; font-weight: bold;">var</span> <span style="color: #61afef;">counterWidget</span> = widgetjs.widget.subclass(<span style="color: #c678dd; font-weight: bold;">function</span>(<span style="color: #c678dd; font-weight: bold;">that</span>, <span style="color: #c678dd; font-weight: bold;">my</span>) {
    <span style="color: #c678dd; font-weight: bold;">my</span>.initialize = <span style="color: #c678dd; font-weight: bold;">function</span>(<span style="color: #c678dd; font-weight: bold;">spec</span>) {
    <span style="color: #c678dd; font-weight: bold;">my</span>.<span style="color: #c678dd; font-weight: bold;">super</span>(<span style="color: #c678dd; font-weight: bold;">spec</span>);
    <span style="color: #c678dd; font-weight: bold;">my</span>.counter = counter();
    };

    <span style="color: #c678dd; font-weight: bold;">that</span>.renderContentOn = <span style="color: #c678dd; font-weight: bold;">function</span> (<span style="color: #61afef;">html</span>) {
    html.<span style="color: #61afef; background-color: #38394c; font-weight: bold;">h1</span>(<span style="color: #c678dd; font-weight: bold;">my</span>.counter.getCount());
    html.<span style="color: #61afef; background-color: #38394c; font-weight: bold;">button</span>(<span style="color: #98be65;">'+'</span>).click(<span style="color: #c678dd; font-weight: bold;">my</span>.counter.increment);
    html.<span style="color: #61afef; background-color: #38394c; font-weight: bold;">button</span>(<span style="color: #98be65;">'-'</span>).click(<span style="color: #c678dd; font-weight: bold;">my</span>.counter.decrement);
    };
    });
    </pre>
    </div>
    </div>
    </div>

    <div id="outline-container-orgheadline1" class="outline-3">
    <h3 id="orgheadline1"><a id="ID-9bd7dfa0-7cd4-4398-90e7-10fd4e696eb5"></a>Benefits</h3>
    <div class="outline-text-3" id="text-orgheadline1">
    <p>
    The approach taken is a bit different from React, but I think it has its
    benefits:
    </p>

    <ul class="org-ul">
    <li>We haven't setup anything to enable data-binding: simply using properties in
    rendering code enables it for us.  We really don't have to think about it.</li>
    <li>Even better, thanks to object properties, no matter how we change the value of
    <code>my.count</code>, being <code>my.count = 10;</code> or <code>my.count++</code>, the widget will be updated
    without having to think about keeping the UI in sync again.</li>
    </ul>

    <p>
    Finally, there are many things that we could do with properties.  With a bit of
    meta-description, we could use it to serialize/deserialize objects from/to
    server data, generate forms, tables and other UI elements, validate domain
    objects, and so on.
    </p>

    <p>
    The code is not final, but have a look at <a href="https://github.com/foretagsplatsen/objectjs/pull/20">the changes</a> if you are interested!
    </p>

    <div id="disqus_thread"></div>
    <script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'nicolas-petton'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    </div>
    </div>
    ]]></description>
</item>
</channel>
</rss>
