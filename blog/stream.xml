<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
     xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>(stream.el)</title>
  <atom:link href="http://nicolas-petton.fr/blog/stream.xml" rel="self" type="application/rss+xml" />
  <link>http://nicolas-petton.fr/blog/</link>
  <description><![CDATA[]]></description>
  <language>en</language>
  <pubDate>Sun, 29 Nov 2015 00:40:15 +0100</pubDate>
  <lastBuildDate>Sun, 29 Nov 2015 00:40:15 +0100</lastBuildDate>
  <generator>Emacs 25.0 Org-mode 8.3.2</generator>
  <webMaster>nicolas@petton.fr (Nicolas Petton)</webMaster>
  <image>
    <url>http://nicolas-petton.fr/images/nicolas-petton.png</url>
    <title>(stream.el)</title>
    <link>http://nicolas-petton.fr/blog/</link>
  </image>


  <item>
    <title>*Lazy sequences* in Emacs with stream.el</title>
    <link>http://nicolas-petton.fr/blog/stream.html#orgheadline1</link>
    <author>Nicolas Petton</author>
    <guid isPermaLink="false">http://nicolas-petton.fr/blog/stream.html#orgheadline1</guid>
    <pubDate>Wed, 14 Oct 2015 17:25:00 +0200</pubDate>

    <description><![CDATA[<div class="pubdate">
    October 14, 2015
    </div>


    <p>
    I just pushed to GNU ELPA the first version of <a href="https://github.com/NicolasPetton/stream">stream</a>, a new streaming library
    for Emacs. Streams are implemented as delayed evaluation of cons cells, and are
    immutable. In that sense they are similar to streams in the SICP book<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup> or to
    Clojure's lazy sequences.
    </p>

    <p>
    <code>stream</code> requires Emacs &gt;= 25, as it leverages the extensibility of <a href="https://github.com/NicolasPetton/seq.el">seq.el</a>: all
    functions defined in <code>seq</code> will work on streams, meaning that it's possible to
    consume a stream using <code>seq-take</code>, map and filter it using <code>seq-map</code> and
    <code>seq-filter</code>, and so forth.
    </p>

    <p>
    Streams could be created from any sequential input data:
    </p>
    <ul class="org-ul">
    <li>sequences, making operation on them lazy</li>
    <li>a set of 2 forms (first and rest), making it easy to represent infinite sequences</li>
    <li>buffers (by character)</li>
    <li>buffers (by line)</li>
    <li>buffers (by page)</li>
    <li>IO streams</li>
    <li>orgmode table cells</li>
    <li>...</li>
    </ul>

    <p>
    The generic <code>stream</code> function currently accepts lists, strings, arrays and
    buffers as input, but it can be cleanly extended to support pretty much any kind
    of data.
    </p>

    <p>
    All operations on streams are lazy (including the functions from seq.el), unless
    data is actually needed.
    </p>

    <p>
    Here is an example of an infinite stream of ones:
    </p>

    <div class="org-src-container">

    <pre class="src src-emacs-lisp">(defun ones ()
    (stream-cons 1 (ones)))

    (ones) ;; =&gt; stream
    </pre>
    </div>

    <p>
    The next example shows an implementation of the Fibonacci numbers
    implemented as in infinite stream:
    </p>

    <div class="org-src-container">

    <pre class="src src-emacs-lisp">(defun fib (a b)
    (stream-cons a (fib b (+ a b))))

    (fib 0 1)
    </pre>
    </div>

    <p>
    The following example returns a stream of the first 50 characters of the
    current buffer:
    </p>

    <div class="org-src-container">

    <pre class="src src-emacs-lisp">(seq-take (stream (current-buffer)) 50) ;; =&gt; stream
    </pre>
    </div>

    <p>
    Because <code>stream</code> implements the <code>seq</code> protocol, it is also possible to use
    mapping, filtering, etc. functions, you just have to remember that all
    operations on streams are lazy:
    </p>

    <div class="org-src-container">

    <pre class="src src-emacs-lisp">(seq-map #'1+ (seq-take (fib 0 1) 50)) ;; =&gt; stream
    </pre>
    </div>

    <p>
    There are many more things to show about <code>stream</code>, one of them being how to
    extend <code>seq</code> with new sequence types.  
    </p>

    <p>
    If you use a recent version of Emacs built from the git repository, you can
    install stream through <code>M-x package-install RET stream</code>.
    </p>
    ]]></description>
  </item>
  <div id="footnotes">
    <h2 class="footnotes">Footnotes: </h2>
    <div id="text-footnotes">

      <div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
      <a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%_sec_3.5">https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html#%_sec_3.5</a>
    </p>

    <div id="disqus_thread"></div>
    <script type="text/javascript">
      /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
      var disqus_shortname = 'nicolas-petton'; // required: replace example with your forum shortname

      /* * * DON'T EDIT BELOW THIS LINE * * */
      (function() {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
      })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
      <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></div></div>


    </div>
</div></channel>
</rss>
