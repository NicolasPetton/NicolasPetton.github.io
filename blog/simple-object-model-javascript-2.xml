<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
     xmlns:georss="http://www.georss.org/georss"
     xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
     xmlns:media="http://search.yahoo.com/mrss/"><channel>
  <title>A simple object model in JavaScript (part #2)</title>
  <atom:link href="http://nicolas-petton.fr/blog/simple-object-model-javascript-2.xml" rel="self" type="application/rss+xml" />
  <link>http://nicolas-petton.fr/blog/</link>
  <description><![CDATA[]]></description>
  <language>en</language>
  <pubDate>Tue, 06 Sep 2016 22:24:48 +0200</pubDate>
  <lastBuildDate>Tue, 06 Sep 2016 22:24:48 +0200</lastBuildDate>
  <generator>Emacs 25.1 Org-mode 8.3.5</generator>
  <webMaster>nicolas@petton.fr (Nicolas Petton)</webMaster>
  <image>
    <url>http://nicolas-petton.fr/images/nicolas-petton.png</url>
    <title>A simple object model in JavaScript (part #2)</title>
    <link>http://nicolas-petton.fr/blog/</link>
  </image>


  <item>
    <title>A simple *object model* in JavaScript part #2</title>
    <link>http://nicolas-petton.fr/blog/simple-object-model-javascript-2.html#orgheadline1</link>
    <author>nicolas@petton.fr (Nicolas Petton)</author>
    <guid isPermaLink="false">http://nicolas-petton.fr/blog/simple-object-model-javascript-2.html#orgheadline1</guid>
    <pubDate>Mon, 22 Feb 2016 08:52:00 +0100</pubDate>

    <description><![CDATA[<div class="pubdate">
    Feb 22, 2016
    </div>

    <p>
    In <a href="http://nicolas-petton.fr/blog/simple-object-model-javascript.html">my previous post</a>, I wrote about an approach to class-based OO in JavaScript.
    I mentioned class extensions (the ability to reopen and extend classes from the
    outside of the class definition) without showing how that can be done.
    </p>

    <div id="outline-container-orgheadline1" class="outline-3">
    <h3 id="orgheadline1"><a id="ID-0da6cc32-c206-4287-8e1c-7ffb6906ea79"></a>An example</h3>
    <div class="outline-text-3" id="text-orgheadline1">
    <p>
    Let's take the same <code>animal</code> example as before:
    </p>

    <div class="org-src-container">

    <pre class="src src-js"><span style="color: #c678dd; font-weight: bold;">var</span> <span style="color: #61afef;">animal</span> = object.subclass(<span style="color: #c678dd; font-weight: bold;">function</span>(<span style="color: #c678dd; font-weight: bold;">that</span>, <span style="color: #c678dd; font-weight: bold;">spec</span>, <span style="color: #c678dd; font-weight: bold;">my</span>) {

    <span style="color: #c678dd; font-weight: bold;">that</span>.initialize = <span style="color: #c678dd; font-weight: bold;">function</span>() {
    <span style="color: #c678dd; font-weight: bold;">my</span>.name = <span style="color: #c678dd; font-weight: bold;">spec</span>.name;
    }

    <span style="color: #c678dd; font-weight: bold;">that</span>.getName = <span style="color: #c678dd; font-weight: bold;">function</span>() {
    <span style="color: #c678dd; font-weight: bold;">return</span> <span style="color: #c678dd; font-weight: bold;">my</span>.name;
    };

    <span style="color: #c678dd; font-weight: bold;">that</span>.isAnimal = <span style="color: #c678dd; font-weight: bold;">function</span>() {
    <span style="color: #c678dd; font-weight: bold;">return</span> <span style="color: #da8548; font-weight: bold;">true</span>;
    }
    });

    <span style="color: #c678dd; font-weight: bold;">var</span> <span style="color: #61afef;">dog</span> = animal.subclass(<span style="color: #c678dd; font-weight: bold;">function</span>(<span style="color: #c678dd; font-weight: bold;">that</span>, <span style="color: #c678dd; font-weight: bold;">spec</span>, <span style="color: #c678dd; font-weight: bold;">my</span>) {

    <span style="color: #c678dd; font-weight: bold;">that</span>.getName = <span style="color: #c678dd; font-weight: bold;">function</span>() {
    <span style="color: #c678dd; font-weight: bold;">return</span> <span style="color: #98be65;">'dog named'</span> + <span style="color: #c678dd; font-weight: bold;">that</span>.<span style="color: #c678dd; font-weight: bold;">super</span>.getName();
    };
    });
    </pre>
    </div>

    <p>
    In this examlpe, it would be nice to be able to "reopen" the <code>object</code> class from
    within the file defining <code>animal</code> to extend it, like the following:
    </p>

    <div class="org-src-container">

    <pre class="src src-js">object.extend(<span style="color: #c678dd; font-weight: bold;">function</span>(<span style="color: #c678dd; font-weight: bold;">that</span>, <span style="color: #c678dd; font-weight: bold;">spec</span>, <span style="color: #c678dd; font-weight: bold;">my</span>) {
    <span style="color: #c678dd; font-weight: bold;">that</span>.isAnimal = <span style="color: #c678dd; font-weight: bold;">function</span>() {
    <span style="color: #c678dd; font-weight: bold;">return</span> <span style="color: #da8548; font-weight: bold;">false</span>;
    };
    })
    </pre>
    </div>

    <p>
    The above example shows how useful class extensions can be: it makes it trivial
    to extend existing classes &#x2013; and for instance make them polymorphic with your
    domain, without having to change existing classes' source code.
    </p>

    <p>
    The implementation is quite straightforward:
    </p>

    <div class="org-src-container">

    <pre class="src src-js">object.extensions = [];

    object.subclass = <span style="color: #c678dd; font-weight: bold;">function</span>(<span style="color: #61afef;">builder</span>) {
    <span style="color: #c678dd; font-weight: bold;">var</span> <span style="color: #c678dd; font-weight: bold;">that</span> = <span style="color: #da8548; font-weight: bold;">this</span>;

    <span style="color: #c678dd; font-weight: bold;">function</span> <span style="color: #61afef;">klass</span>(<span style="color: #c678dd; font-weight: bold;">spec</span>, <span style="color: #c678dd; font-weight: bold;">my</span>) {
    <span style="color: #c678dd; font-weight: bold;">spec</span> = <span style="color: #c678dd; font-weight: bold;">spec</span> || {};
    <span style="color: #c678dd; font-weight: bold;">my</span> = <span style="color: #c678dd; font-weight: bold;">my</span> || {};

    <span style="color: #c678dd; font-weight: bold;">var</span> <span style="color: #61afef;">instance</span> = <span style="color: #c678dd; font-weight: bold;">that</span>(<span style="color: #c678dd; font-weight: bold;">spec</span>, <span style="color: #c678dd; font-weight: bold;">my</span>);

    instance.<span style="color: #c678dd; font-weight: bold;">class</span> = klass;

    <span style="color: #687080; font-style: italic;">// </span><span style="color: #687080; font-style: italic;">access to super for public and protected properties.</span>
    instance.<span style="color: #c678dd; font-weight: bold;">super</span> = Object.assign({}, instance);
    <span style="color: #c678dd; font-weight: bold;">my</span>.<span style="color: #c678dd; font-weight: bold;">super</span> = Object.assign({}, <span style="color: #c678dd; font-weight: bold;">my</span>);

    <span style="color: #c678dd; font-weight: bold;">that</span>.extensions.forEach(<span style="color: #c678dd; font-weight: bold;">function</span>(<span style="color: #61afef;">extension</span>) {
    extension(instance, <span style="color: #c678dd; font-weight: bold;">spec</span>, <span style="color: #c678dd; font-weight: bold;">my</span>);
    });

    builder(instance, <span style="color: #c678dd; font-weight: bold;">spec</span>, <span style="color: #c678dd; font-weight: bold;">my</span>);
    instance.initialize();

    <span style="color: #c678dd; font-weight: bold;">return</span> instance;
    }

    <span style="color: #687080; font-style: italic;">// </span><span style="color: #687080; font-style: italic;">static inheritance</span>
    Object.assign(klass, <span style="color: #c678dd; font-weight: bold;">that</span>);

    klass.subclasses = [];
    <span style="color: #c678dd; font-weight: bold;">that</span>.subclasses.push(klass);

    <span style="color: #c678dd; font-weight: bold;">return</span> klass;
    };

    object.extend = <span style="color: #c678dd; font-weight: bold;">function</span>(<span style="color: #61afef;">builder</span>) {
    <span style="color: #da8548; font-weight: bold;">this</span>.extensions.push(builder);
    };
    </pre>
    </div>

    <p>
    There are several other improvements that can be made, but in the meantime head
    over to <a href="https://github.com/foretagsplatsen/objectjs">GitHub</a> if you want to grab the source code.
    </p>

    <div id="disqus_thread"></div>
    <script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'nicolas-petton'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
    </div>
    </div>
    ]]></description>
</item>
</channel>
</rss>
